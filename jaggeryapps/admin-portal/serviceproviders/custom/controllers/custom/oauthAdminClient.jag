<%
include("../wsUtil.jag");
var util = require("../../util/utility.jag");

var log = new Log();
var serverUrl = util.getServerUrl();
serverUrl = serverUrl + "/OAuthAdminService";

var ws = require('ws');
var webService = new ws.WSRequest();

function getAllowedGrantTypes(){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getAllowedGrantTypes", null);
    return result;
}
function isPKCESupportEnabled(){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:isPKCESupportEnabled", null);
    return result;
}
function getOAuthApplicationDataByAppName(appName){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getOAuthApplicationDataByAppName", appName ? new Array(appName) : new Array(""));
    return result;
}
function getOAuthApplicationData(clientID){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getOAuthApplicationData", clientID ? new Array(clientID) : new Array(""));
    return result;
}
function removeOAuthApplicationData(consumerID){
    webService = new ws.WSRequest();
    callWSInOnlyWithParams(webService, serverUrl, "urn:removeOAuthApplicationData", consumerID ? new Array(consumerID) : new Array("") );
}
function updateConsumerApplication(payload){
    webService = new ws.WSRequest();
    callWSInOnly(webService, serverUrl, "urn:updateConsumerApplication", payload);
}
function registerOAuthApplicationData(payload){
    webService = new ws.WSRequest();
    callWSInOnly(webService, serverUrl, "urn:registerOAuthApplicationData", payload);
}
%>