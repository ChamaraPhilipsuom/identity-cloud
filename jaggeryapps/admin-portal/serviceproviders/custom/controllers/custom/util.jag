<%
include("../../../util/constants.jag");
function removeOauthConfig(sptype,spName) {
    var spAdminClient = require('spAdminClient.jag');
    var serviceProvider = spAdminClient.getApplication(spName).return;

    var updateSp = '<xsd:updateApplication xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://org.apache.axis2/xsd" xmlns:xsd1="http://model.common.application.identity.carbon.wso2.org/xsd">'+
            '<xsd:serviceProvider>'+
            '<xsd1:applicationID>'+serviceProvider.applicationID+'</xsd1:applicationID>'+
            '<xsd1:applicationName>'+serviceProvider.applicationName+'</xsd1:applicationName>'+
            '<xsd1:claimConfig>'+
            '<xsd1:alwaysSendMappedLocalSubjectId>'+serviceProvider.claimConfig.alwaysSendMappedLocalSubjectId+'</xsd1:alwaysSendMappedLocalSubjectId>';
    var claimMappings = serviceProvider.claimConfig.claimMappings;
    if(claimMappings != null && claimMappings.length > 0) {
        if(claimMappings.constructor !== Array){
            claimMappings = [claimMappings];
        }
        for (var i in claimMappings) {
            var claimMapping = claimMappings[i];
            updateSp = updateSp + '<xsd1:claimMappings>' +
                    '<xsd1:defaultValue>' + claimMapping.defaultValue + '</xsd1:defaultValue>' +
                    '<xsd1:localClaim>' +
                    '<xsd1:claimId>' + claimMapping.localClaim.claimId + '</xsd1:claimId>' +
                    '<xsd1:claimUri>' + claimMapping.localClaim.claimUri + '</xsd1:claimUri>' +
                    '</xsd1:localClaim>' +
                    '<xsd1:remoteClaim>' +
                    '<xsd1:claimId>' + claimMapping.remoteClaim.claimId + '</xsd1:claimId>' +
                    '<xsd1:claimUri>' + claimMapping.remoteClaim.claimUri + '</xsd1:claimUri>' +
                    '</xsd1:remoteClaim>' +
                    '<xsd1:requested>' + claimMapping.requested + '</xsd1:requested>' +
                    '</xsd1:claimMappings>';
        }
    }
    updateSp = updateSp +
            '<xsd1:localClaimDialect>'+serviceProvider.claimConfig.localClaimDialect+'</xsd1:localClaimDialect>'+
            '<xsd1:roleClaimURI>'+serviceProvider.claimConfig.roleClaimURI+'</xsd1:roleClaimURI>'+
            '<xsd1:userClaimURI>'+serviceProvider.claimConfig.userClaimURI+'</xsd1:userClaimURI>'+
            '</xsd1:claimConfig>'+
            '<xsd1:description>'+serviceProvider.description+'</xsd1:description>'+
            '<xsd1:inboundAuthenticationConfig>';

    var inboundConfigs = serviceProvider.inboundAuthenticationConfig.inboundAuthenticationRequestConfigs;
    if(inboundConfigs.constructor !== Array){
        inboundConfigs = [inboundConfigs];
    }
    var samlConfig = null;
    for (var i in inboundConfigs){
        var conf = inboundConfigs[i];
        if(conf.inboundAuthType == SAML_SSO){
            samlConfig = conf;
            break;
        }
    }
    if(samlConfig != null){
        updateSp = updateSp + '<xsd1:inboundAuthenticationRequestConfigs>'+
                '<xsd1:friendlyName>' + samlConfig.friendlyName + '</xsd1:friendlyName>'+
                '<xsd1:inboundAuthKey>' + samlConfig.inboundAuthKey + '</xsd1:inboundAuthKey>'+
                '<xsd1:inboundAuthType>' + samlConfig.inboundAuthType+'</xsd1:inboundAuthType>';
        var props = samlConfig.properties;
        //props can't be null
        if(props.constructor !== Array) {
            props = [props];
        }
        for (var i in props) {
            var prop = props[i];
            updateSp = updateSp + '<xsd1:properties>' +
                    '<xsd1:confidential>' + prop.confidential + '</xsd1:confidential>' +
                    '<xsd1:defaultValue>' + prop.defaultValue + '</xsd1:defaultValue>' +
                    '<xsd1:description>' + prop.description + '</xsd1:description>' +
                    '<xsd1:displayName>' + prop.displayName + '</xsd1:displayName>' +
                    '<xsd1:displayOrder>' + prop.displayOrder + '</xsd1:displayOrder>' +
                    '<xsd1:name>' + prop.name + '</xsd1:name>' +
                    '<xsd1:required>' + prop.required + '</xsd1:required>' +
                    '<xsd1:type>' + prop.type + '</xsd1:type>' +
                    '<xsd1:value>' + prop.value + '</xsd1:value>' +
                    '</xsd1:properties>';
        }
        updateSp = updateSp + '</xsd1:inboundAuthenticationRequestConfigs>';
    }
    var stsConfig;
    for (var i in inboundConfigs){
        var conf = inboundConfigs[i];
        if(conf.inboundAuthType == PASSIVE_STS){
            stsConfig = conf;
            break;
        }
    }
    if (stsConfig != null) {
        updateSp = updateSp + '<xsd1:inboundAuthenticationRequestConfigs>' +
                '<xsd1:friendlyName>'+stsConfig.friendlyName+'</xsd1:friendlyName>' +
                '<xsd1:inboundAuthKey>' + stsConfig.inboundAuthKey + '</xsd1:inboundAuthKey>' +
                '<xsd1:inboundAuthType>passivests</xsd1:inboundAuthType>';
        var props = stsConfig.properties;
        //props can't be null
        if(props.constructor !== Array) {
            props = [props];
        }
        for (var i in props) {
            var prop = props[i];
            updateSp = updateSp +  '<xsd1:properties>' +
            '<xsd1:confidential>'+prop.confidential+'</xsd1:confidential>' +
            '<xsd1:defaultValue>'+prop.defaultValue+'</xsd1:defaultValue>' +
            '<xsd1:description>'+prop.description+'</xsd1:description>' +
            '<xsd1:displayName>'+prop.displayName+'</xsd1:displayName>' +
            '<xsd1:displayOrder>'+prop.displayOrder+'</xsd1:displayOrder>' +
            '<xsd1:name>'+prop.name+'</xsd1:name>' +
            '<xsd1:required>'+prop.required+'</xsd1:required>' +
            '<xsd1:type>'+prop.type+'</xsd1:type>' +
            '<xsd1:value>' + prop.value + '</xsd1:value>' +
            '</xsd1:properties>'
        }
        updateSp = updateSp + '</xsd1:inboundAuthenticationRequestConfigs>';

    }
    updateSp = updateSp + '</xsd1:inboundAuthenticationConfig>';


    if(serviceProvider.localAndOutBoundAuthenticationConfig != null && serviceProvider.localAndOutBoundAuthenticationConfig > 0) {
        updateSp = updateSp + '<xsd1:localAndOutBoundAuthenticationConfig>' +
                '<xsd1:alwaysSendBackAuthenticatedListOfIdPs>'+serviceProvider.localAndOutBoundAuthenticationConfig.alwaysSendBackAuthenticatedListOfIdPs+'</xsd1:alwaysSendBackAuthenticatedListOfIdPs>' +
                '<xsd1:authenticationType>'+serviceProvider.localAndOutBoundAuthenticationConfig.authenticationType+'</xsd1:authenticationType>' +
                '<xsd1:subjectClaimUri>'+serviceProvider.localAndOutBoundAuthenticationConfig.subjectClaimUri + '</xsd1:subjectClaimUri>' +
                '<xsd1:useTenantDomainInLocalSubjectIdentifier>'+serviceProvider.localAndOutBoundAuthenticationConfig.useTenantDomainInLocalSubjectIdentifier+'</xsd1:useTenantDomainInLocalSubjectIdentifier>' +
                '<xsd1:useUserstoreDomainInLocalSubjectIdentifier>'+serviceProvider.localAndOutBoundAuthenticationConfig.useUserstoreDomainInLocalSubjectIdentifier+'</xsd1:useUserstoreDomainInLocalSubjectIdentifier>' +
                '</xsd1:localAndOutBoundAuthenticationConfig>';
    }
    updateSp = updateSp + '<xsd1:inboundProvisioningConfig>'+
            '<xsd1:dumbMode>'+serviceProvider.inboundProvisioningConfig.dumbMode+'</xsd1:dumbMode>'+
            '<xsd1:provisioningEnabled>'+serviceProvider.inboundProvisioningConfig.provisioningEnabled+'</xsd1:provisioningEnabled>'+
            '<xsd1:provisioningUserStore>'+serviceProvider.inboundProvisioningConfig.provisioningUserStore+'</xsd1:provisioningUserStore>'+
            '</xsd1:inboundProvisioningConfig>'+

            '<xsd1:outboundProvisioningConfig>'+
            '<xsd1:provisionByRoleList>'+ serviceProvider.outboundProvisioningConfig.provisionByRoleList +'</xsd1:provisionByRoleList>'+
            '</xsd1:outboundProvisioningConfig>'+

            '<xsd1:permissionAndRoleConfig></xsd1:permissionAndRoleConfig>'+
            '<xsd1:spProperties>'+
            '<xsd1:displayName>WellKnown Application Type</xsd1:displayName>'+
            '<xsd1:name>appType</xsd1:name>'+
            '<xsd1:value>'+sptype+'</xsd1:value>'+
            '</xsd1:spProperties>'+
            '</xsd:serviceProvider>'+
            '</xsd:updateApplication>';
    spAdminClient.updateApplicationData(updateSp);
}

%>
